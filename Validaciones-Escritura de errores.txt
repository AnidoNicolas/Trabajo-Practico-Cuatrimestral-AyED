void escribirError(char* error){
    ifstream fErrores ("errores.db");
    int indice=0;
    if(!fErrores){
        ofstream fErrores("errores.db");
    }
    fErrores.open("errores.db", ofstream::out | ofstream::app);
    while(!fErrores.eof()){
        indice=indice+1;
    }
    fErrores<"ID: <<indice<<"Descripcion": <<error<<endl;
    fErrores.close();
}
void validaciones(ListaEquipo &listaE, ListaJugador &listaJ){
    int contarARQ, contarDEF, contarMED, contarDEL, valorT,tamanioE,tamanioJ;
    char* error;
    Configuracion config;
    Jugador jugador;
    Equipo equipo;
    PtrNodoListaEquipo cursorE=primeroEquipo(listaE);
    PtrNodoLista cursorJ= primero(listaJ);
    tamanioE=longitudEquipo(listaE);
    tamanioJ=longitud(listaJ);
    for(int i=0;i<tamanioE;i++){
        obtenerDatoEquipo(listaE,equipo,cursorE);
        for(int j=0;j<tamanioJ;j++){
            obtenerDato(listaJ,jugador,cursorJ);
            if (jugador.posision=ARQ){
                contarARQ=contarARQ +1;
            }
            if (jugador.posision=DEF){
                contarDEF=contarDEF +1;
            }
            if (jugador.posision=MED){
                contarMED=contarMED +1;
            }
            if (jugador.posision=ARQ){
                contarDEL=contarDEL +1;
            }
            valorT=valorT+jugador.precio;

            if(ARQ>getARQ(config)){
                strcpy(error,"Cantidad de arqueros disponible superada");
                cout<<"El equipo "<<getNombre(equipo)<<" sera eliminado"<<endl;
                escribirError(error);
                eliminarListaEquipo(listaE);
            }

            if(DEF>getDEF(config)){
                strcpy(error,"Cantidad de defensores disponible superada");
                cout<<"El equipo "<<getNombre(equipo)<<" sera eliminado"<<endl;
                escribirError(error);
                eliminarListaEquipo(listaE);
            }

            if(MED>getMED(config)){
                strcpy(error,"Cantidad de mediocampistas disponible superada");
                cout<<"El equipo "<<getNombre(equipo)<<" sera eliminado"<<endl;
                escribirError(error);
                eliminarListaEquipo(listaE);
            }

            if(DEL>getDEL(config)){
                strcpy(error,"Cantidad de delanteros disponible superada");
                cout<<"El equipo "<<getNombre(equipo)<<" sera eliminado"<<endl;
                escribirError(error);
                eliminarListaEquipo(listaE);
            }

            if(valorT>getValorMaximoXEquipo(config)>valorT){
                strcpy(error,"Valor maximo por equipo superada");
                cout<<"El equipo "<<getNombre(equipo)<<" sera eliminado"<<endl;
                escribirError(error);
                eliminarListaEquipo(listaE);
            }
        }
        PtrNodoListaEquipo cursorE=siguienteEquipo(listaE,cursorE);
    }
}

void cargarEquipos(ListaEquipo &lista){
    char id[3];
    char* nombre;
    char* usuario;
    ifstream fequipo ("equipos.db",ios::in);
    if(!fequipo) cout << "no existe el arhcivo de equipos";
    while(!fequipo.eof()){
        nombre= new char[30];
        usuario= new char[30];
        Equipo equipo;
        crear(equipo);
        fequipo.getline(id,3,';');
        setId(equipo, atoi(id));
        fequipo.getline(nombre,30,';');
        setNombre(equipo,nombre);
        fequipo.getline(usuario,30,'\n');
        setNombreUsuario(equipo,usuario);

        adicionarFinalEquipo(lista,equipo);
    }
    fequipo.close();
}

void cargarJugadoresPorEquipo (listaJxE &lista){
    char idE[3],idJ[3];
    ifstream fJugadoresPorEquipo("jugadoresPorEquipo.db",ios::in);
    if(!fJugadoresPorEquipo)cout<<"no existe el arhcivo de jugadores por equipo ";
    while(!fJugadoresPorEquipo.eof()){
        JugadoresPorEquipo JxE;
        crear(JxE);
        fJugadoresPorEquipo.getline(idE,3,';');
        setIdEquipo(JxE,atoi(idE));
        fJugadoresPorEquipo.getline(idJ,3,'\n');
        setIdJugador(JxE,atoi(idJ));
        adicionarFinal(lista, JxE);
    }
    fJugadoresPorEquipo.close();
}